#!/bin/bash
source "$(dirname "${BASH_SOURCE[0]}")/ui-utils.sh"

# ------------------------------------------------------------
# UI
# ------------------------------------------------------------
menu_select "$(color.blue "▶ Select template?")" "hono" "next" "react-router" "vanilla"
prompt_input "$(color.blue "▶ Enter package name")"
#
if [ -d "apps/$INPUT" ]; then
  echo "$(color.warn "Directory 'apps/$INPUT' already exists. Overwrite? (Y/n)")"
  read -r answer
  if [[ "$answer" =~ ^[Nn]$ ]]; then
    echo "$(color.error "Operation cancelled.")"
    exit 0
  fi
else 
  mkdir -p apps/$INPUT
fi

# ------------------------------------------------------------
# create hono based api
# ------------------------------------------------------------
if [ "$SELECTED" == "hono" ]; then
  cd apps
  pnpm create hono@latest --pm=pnpm --template=nodejs --install $INPUT
  cd $INPUT

  pnpm pkg set scripts.check-types="tsc --noEmit"
  pnpm pkg set devDependencies.@types/node="catalog:"
  pnpm pkg set devDependencies.typescript="catalog:"
  pnpm install

  pnpm add --workspace -D @monorepo-starter/eslint-config @monorepo-starter/typescript-config

  echo "$(color.success "Created $INPUT")"
  echo "$(color.magenta "run: cd apps/$INPUT && pnpm dev")"
fi

# ------------------------------------------------------------
# create nextjs based
# ------------------------------------------------------------
if [ "$SELECTED" == "next" ]; then
  # create next project
  pnpm create next-app@latest apps/$INPUT --ts --tailwind --import-alias "~/*" --eslint --app --src-dir --turbopack --empty --use-pnpm --skip-install
  cd apps/$INPUT

  # add scripts
  #pnpm pkg set scripts.predev="../../packages/devtools/bin/index.js --watch -p apps/$INPUT &"
  pnpm pkg set scripts.check-types="tsc --noEmit"

  # install
  pnpm install

  # add production dependencies
  pnpm pkg set dependencies.next="catalog:"
  pnpm pkg set dependencies.react="catalog:"
  pnpm pkg set dependencies.react-dom="catalog:"

  # add devDependencies
  pnpm pkg set devDependencies.@eslint/eslintrc="catalog:"
  pnpm pkg set devDependencies.@tailwindcss/postcss="catalog:"
  pnpm pkg set devDependencies.@types/node="catalog:"
  pnpm pkg set devDependencies.@types/react="catalog:"
  pnpm pkg set devDependencies.@types/react-dom="catalog:"
  pnpm pkg set devDependencies.eslint="catalog:"
  pnpm pkg set devDependencies.eslint-config-next="catalog:"
  pnpm pkg set devDependencies.tailwindcss="catalog:"
  pnpm pkg set devDependencies.typescript="catalog:"

  # add production workspace dependencies
  pnpm add --workspace @monorepo-starter/ui

  # add devDependencies workspace dependencies
  pnpm add -D --workspace @monorepo-starter/eslint-config @monorepo-starter/typescript-config

  # create components.json
  cat <<'EOF' > components.json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "../../packages/ui/src/styles/globals.css",
    "baseColor": "zinc",
    "cssVariables": true
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "~/components",
    "hooks": "~/hooks",
    "lib": "~/lib",
    "utils": "@monorepo-starter/ui/lib/utils",
    "ui": "@monorepo-starter/ui/components"
  }
}
EOF

  # create eslint.config.mjs
  cat <<'EOF' > eslint.config.mjs
import { nextJsConfig } from '@monorepo-starter/eslint-config/next';

/** @type {import("eslint").Linter.Config} */
export default nextJsConfig;
EOF

  # create next.config.ts
  cat <<'EOF' > next.config.ts
import type { NextConfig } from 'next';

/**
 * @see {@link https://nextjs.org/docs/app/api-reference/config/next-config-js NextConfig}
 */
const nextConfig: NextConfig = {
  transpilePackages: ['@monorepo-starter/ui'],
};

export default nextConfig;
EOF

  # create postcss.config.mjs
  cat <<'EOF' > postcss.config.mjs
export { default } from '@monorepo-starter/ui/postcss.config';
EOF

  # create tsconfig.json
  cat <<'EOF' > tsconfig.json
{
  "extends": "@monorepo-starter/typescript-config/nextjs.json",
  "compilerOptions": {
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "~/*": ["./src/*"],
      "@monorepo-starter/ui/*": ["../../packages/ui/src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
EOF

  # create src/app/layout.tsx
  cat <<'EOF' > src/app/layout.tsx
import type { Metadata } from "next";
import "./globals.css";

import '@monorepo-starter/ui/globals.css';

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  );
}
EOF

  # format code
  pnpm -w format "./apps/$INPUT/**/*.{js,jsx,ts,tsx,json,css,md,mdx}"

  echo "$(color.success "Created $INPUT")"
  echo "$(color.magenta "run: cd apps/$INPUT && pnpm dev")"
fi
