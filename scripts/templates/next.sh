#!/bin/bash

# ------------------------------------------------------------
# create next project
# ------------------------------------------------------------
# ├── README.md
# ├── components.json
# ├── eslint.config.mjs
# ├── next.config.ts
# ├── package.json
# ├── postcss.config.mjs
# ├── src
# │   └── app
# │       ├── globals.css
# │       ├── layout.tsx
# │       └── page.tsx
# └── tsconfig.json
# ------------------------------------------------------------

# run create next empty project command
pnpm create next-app@latest apps/$INPUT --ts --tailwind --import-alias "~/*" --eslint --app --src-dir --turbopack --empty --use-pnpm --skip-install
cd apps/$INPUT

# add scripts
#pnpm pkg set scripts.predev="../../packages/devtools/bin/index.js --watch -p apps/$INPUT &"
pnpm pkg set scripts.check-types="tsc --noEmit"

# install
pnpm install

# add production dependencies
pnpm pkg set dependencies.next="catalog:"
pnpm pkg set dependencies.react="catalog:"
pnpm pkg set dependencies.react-dom="catalog:"

# add devDependencies
pnpm pkg set devDependencies.@eslint/eslintrc="catalog:"
pnpm pkg set devDependencies.@tailwindcss/postcss="catalog:"
pnpm pkg set devDependencies.@types/node="catalog:"
pnpm pkg set devDependencies.@types/react="catalog:"
pnpm pkg set devDependencies.@types/react-dom="catalog:"
pnpm pkg set devDependencies.eslint="catalog:"
pnpm pkg set devDependencies.eslint-config-next="catalog:"
pnpm pkg set devDependencies.tailwindcss="catalog:"
pnpm pkg set devDependencies.typescript="catalog:"

# add production workspace dependencies
pnpm add --workspace @monorepo-starter/ui

# add devDependencies workspace dependencies
pnpm add -D --workspace @monorepo-starter/eslint-config @monorepo-starter/typescript-config

# ------------------------------------------------------------
# create files
# ------------------------------------------------------------

# create components.json
cat <<'EOF' > components.json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "../../packages/ui/src/styles/globals.css",
    "baseColor": "zinc",
    "cssVariables": true
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "~/components",
    "hooks": "~/hooks",
    "lib": "~/lib",
    "utils": "@monorepo-starter/ui/lib/utils",
    "ui": "@monorepo-starter/ui/components"
  }
}
EOF

# create eslint.config.mjs
cat <<'EOF' > eslint.config.mjs
import { nextJsConfig } from '@monorepo-starter/eslint-config/next';

/** @type {import("eslint").Linter.Config} */
export default nextJsConfig;
EOF

# create next.config.ts
cat <<'EOF' > next.config.ts
import type { NextConfig } from 'next';

/**
 * @see {@link https://nextjs.org/docs/app/api-reference/config/next-config-js NextConfig}
 */
const nextConfig: NextConfig = {
  transpilePackages: ['@monorepo-starter/ui'],
};

export default nextConfig;
EOF

# create postcss.config.mjs
cat <<'EOF' > postcss.config.mjs
export { default } from '@monorepo-starter/ui/postcss.config';
EOF

# create tsconfig.json
cat <<'EOF' > tsconfig.json
{
  "extends": "@monorepo-starter/typescript-config/nextjs.json",
  "compilerOptions": {
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "~/*": ["./src/*"],
      "@monorepo-starter/ui/*": ["../../packages/ui/src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
EOF

# create src/app/layout.tsx
cat <<'EOF' > src/app/layout.tsx
import type { Metadata } from "next";
import "./globals.css";

import '@monorepo-starter/ui/globals.css';

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  );
}
EOF

# ------------------------------------------------------------
# format code
# ------------------------------------------------------------
pnpm -w format "./apps/$INPUT/**/*.{js,jsx,ts,tsx,json,css,md,mdx}"

# ------------------------------------------------------------
# print success message
# ------------------------------------------------------------
echo "$(color.success "Created $INPUT")"
echo "$(color.magenta "run: cd apps/$INPUT && pnpm dev")"
