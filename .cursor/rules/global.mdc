---
alwaysApply: true
---

# 프로젝트 전역 규칙

> **Colosseum SaaS Integrated Monorepo Frontend Environment**

## 🎯 기본 설정

### 언어 및 스타일
- **언어**: 한국어로 응답 및 주석 작성
- **코드 스타일**: TypeScript strict 모드, ESLint 규칙 준수
- **포맷팅**: Prettier + Tailwind CSS 플러그인 사용

### 프로젝트 구조
```
csfe/
├── apps/          # 애플리케이션들 (Next.js, React 등)
└── packages/      # 공유 패키지들 (UI, CLI, 설정, E2E 테스트 등)
```

## 📦 패키지 매니저

### pnpm 사용 (필수)
- **버전**: pnpm@10.17.0
- npm/yarn 대신 **항상** `pnpm` 명령어 사용
- 예: `npm install` → `pnpm install`

### 의존성 관리 명령어
```bash
# 새 패키지 설치
pnpm add [패키지명]

# 개발 의존성 설치
pnpm add -D [패키지명]

# 워크스페이스 의존성 설치
pnpm add --workspace [패키지명]
pnpm add -D --workspace [패키지명]

# 워크스페이스 루트 설치
pnpm -w install
```

## 🚀 개발 명령어

### Turbo 기반 스크립트
```bash
pnpm dev          # 개발 서버 (모든 앱)
pnpm build        # 빌드 (모든 앱)
pnpm test         # 테스트 실행
pnpm lint         # 린트 검사
pnpm check-types  # 타입 체크
pnpm format       # 코드 포맷팅
```

### 개별 패키지 작업
```bash
cd apps/[앱명] && pnpm dev
cd packages/[패키지명] && pnpm test
```

## 🧪 테스트 규칙

### 테스트 프레임워크
- **단위/통합**: Vitest + jsdom
- **E2E**: Playwright
- **파일명**: `*.test.ts` 또는 `*.test.tsx`

### 테스트 작성 규칙
```typescript
// ✅ 올바른 예시
describe('사용자 서비스', () => {
  it('사용자 정보를 가져와야 함', () => {
    // 테스트 코드
  });
});

// ❌ 피해야 할 예시
describe('UserService', () => {
  it('should work', () => {
    // 테스트 코드
  });
});
```

### 테스트 설정
- Vitest 설정: `vitest.config.ts`에서 jsdom 환경
- E2E 테스트: `packages/e2e/` 폴더에 배치

## 💻 코딩 규칙

### React/TypeScript
- 함수형 컴포넌트 사용
- Hooks 패턴 준수
- 타입 안전성 보장
- 에러 처리 및 로깅 포함

### Next.js 개발 원칙
- **서버 컴포넌트 우선**: 기본적으로 서버 컴포넌트 사용
- **서버 액션 우선**: 폼 처리 및 데이터 변경은 서버 액션 사용
- **클라이언트 컴포넌트 최소화**: `'use client'` 지시어는 필요한 경우에만 사용
- **스트리밍 활용**: Suspense와 loading.tsx를 활용한 점진적 로딩

### 서버 컴포넌트 사용 가이드
```typescript
// ✅ 서버 컴포넌트 (기본)
export default function ServerComponent() {
  return <div>서버에서 렌더링</div>;
}

// ✅ 서버 액션
async function ServerAction(formData: FormData) {
  'use server';
  // 서버에서 실행되는 액션
}

// ❌ 불필요한 클라이언트 컴포넌트
'use client';
export default function UnnecessaryClientComponent() {
  // 정적 콘텐츠는 서버 컴포넌트로
}
```

### 클라이언트 컴포넌트 사용 조건
- 상태 관리 (useState, useReducer)
- 이벤트 핸들러 (onClick, onChange)
- 브라우저 API 사용 (localStorage, window)
- 생명주기 훅 (useEffect, useLayoutEffect)
- 커스텀 훅 사용

### 코드 품질
- DRY 원칙 준수
- 간결하고 명확한 코드 작성
- 한글 주석으로 상세 설명
- API 문서는 영어도 병행

## 🔧 도구 설정

### Prettier 설정
- Tailwind CSS 플러그인 사용
- Import 자동 정리
- 코드 포맷팅 자동화

### Husky + lint-staged
- 커밋 전 자동 포맷팅
- 린트 검사 자동화

### Turbo 설정
- 병렬 빌드 최적화
- 캐시 활용
- 의존성 그래프 관리

## 📝 Git 및 버전 관리

### 커밋 규칙
- [Conventional Commits](https://www.conventionalcommits.org/ko/v1.0.0/) 준수
- 예: `feat: 새로운 기능 추가`, `fix: 버그 수정`

### 브랜치 전략
- `main`: 프로덕션 브랜치
- `develop`: 개발 브랜치
- `feature/*`: 기능 개발
- `fix/*`: 버그 수정

## 🎨 UI/UX 규칙

### 접근성 (A11y)
- WCAG 2.1 AA 수준 준수
- 키보드 네비게이션 지원
- 스크린 리더 호환성
- 색상 대비 비율 준수

### 성능 최적화
- 불필요한 의존성 제거
- 번들 크기 최적화

## ⚠️ 주의사항

### 모노레포 관리
- 패키지 간 순환 의존성 방지
- 의존성 버전 충돌 방지
- Import 경로 최적화

### 보안
- 환경 변수 노출 방지
- 의존성 취약점 정기 점검
- 코드 리뷰 필수

## 📚 문서화

### README 작성
- 각 패키지/앱별 상세 README
- 설치 및 실행 방법 명시
- API 문서 포함

### 코드 문서화
- 함수/클래스 JSDoc 작성
- 복잡한 로직 주석 추가
- 변경 이력 관리
